<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java多线程：sychronized和ReentrantLock</title>
    <link href="/2024/08/07/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9Asychronized%E5%92%8CReentrantLock/"/>
    <url>/2024/08/07/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9Asychronized%E5%92%8CReentrantLock/</url>
    
    <content type="html"><![CDATA[<h1 id="sychronized-VS-ReentrantLock"><a href="#sychronized-VS-ReentrantLock" class="headerlink" title="sychronized VS ReentrantLock"></a>sychronized VS ReentrantLock</h1><h2 id="一、实现层面"><a href="#一、实现层面" class="headerlink" title="一、实现层面"></a>一、实现层面</h2><ul><li>sychronized 是Java中的关键字，是JVM虚拟机实现的，底层是调用操作系统的mutex方法</li><li>ReentrantLock是java并发包下的Lock接口的实现类</li></ul><h2 id="二、性能层面"><a href="#二、性能层面" class="headerlink" title="二、性能层面"></a>二、性能层面</h2><ul><li><strong>synchronized</strong> 在jdk1.6之前是重量级锁，也就是调用OS的mutex方法，在jdk1.6之后进行了锁的升级，默认是<strong>偏向锁</strong>，在存在资源竞争的时候会进行锁的升级。</li><li><strong>ReentrantLock</strong>内部是使用<strong>CAS机制</strong>来保证锁的</li></ul><h2 id="三、灵活层面"><a href="#三、灵活层面" class="headerlink" title="三、灵活层面"></a>三、灵活层面</h2><ul><li>sychronized是不可中断的，在方法执行完毕或者出现异常的时候才会释放锁。</li><li>ReentrantLock是可以中断的。</li></ul><h2 id="四、公平性层面"><a href="#四、公平性层面" class="headerlink" title="四、公平性层面"></a>四、公平性层面</h2><ul><li><p>sychronzied是非公平锁的，即先到先得。</p></li><li><p>ReentrantLock既有公平锁的实现也有非公平锁的实现。</p></li></ul><p>非公平性体现在第一次抢占锁是先到先得<br>公平性体现在已经有人持有锁了，那么后续的就进入等待队列。</p><h2 id="五、使用层面"><a href="#五、使用层面" class="headerlink" title="五、使用层面"></a>五、使用层面</h2><ul><li>synchronized可以修饰在类，方法，代码块上</li><li>ReentrantLock在方法中使用，与Conditon配合使用，并且还可以绑定多个condition</li></ul><h2 id="六、应用场景"><a href="#六、应用场景" class="headerlink" title="六、应用场景"></a>六、应用场景</h2><h3 id="sychronized"><a href="#sychronized" class="headerlink" title="sychronized"></a>sychronized</h3><ul><li>简单场景使用： 对于简单的同步需求，Synchronized 是更简洁的选择。它隐式地获取和释放锁，减少了编码的复杂性。</li><li>方法级别同步： Synchronized 可以直接应用于方法上，使得整个方法成为一个原子操作，适用于简单的同步需求。</li><li>等待通知机制： Synchronized 内置了等待通知机制，方便实现线程之间的协作。</li></ul><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><ul><li>高度定制性： ReentrantLock 提供了更高度的定制性，可以实现更复杂的同步控制，例如可中断锁、公平锁等。</li><li>多条件同步： ReentrantLock 支持多个条件变量，可以更灵活地实现复杂的线程间通信和同步。</li><li>手动释放锁： 与 Synchronized 不同，ReentrantLock 要求手动释放锁，使得在特定场景下更加可控。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java 多线程 synchronized ReentrantLock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Bean生命周期&amp;循环依赖</title>
    <link href="/2024/08/07/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
    <url>/2024/08/07/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</url>
    
    <content type="html"><![CDATA[<h2 id="Bean-生命周期"><a href="#Bean-生命周期" class="headerlink" title="Bean 生命周期"></a>Bean 生命周期</h2><h3 id="一、生命周期（文字叙述）"><a href="#一、生命周期（文字叙述）" class="headerlink" title="一、生命周期（文字叙述）"></a>一、生命周期（文字叙述）</h3><ol><li>通过BeanDefinition获取bean的定义信息</li><li>通过构造函数实例化bean</li><li>bean的依赖注入</li><li>处理Aware接口 （BeanFactoryAware、BeanFactoryAware、ApplicationContextAware）</li><li>Bean的后置处理器BeanPostProcessor-前置</li><li>初始化方法（InitializingBean、init-method）</li><li>Bean的后置处理器BeanPostProcessor-后置</li><li>销毁Bean</li></ol><p>这个叙述过程对于理解比较困难，结合实际使用Spring的情况下可以如此去理解这段话的含义。</p><ol><li><strong>Bean</strong> 定义与注册阶段</li></ol><ul><li><p><strong>Bean元信息配置阶段</strong>：此阶段主要是Bean信息的定义阶段，可以通过XML配置文件、Java配置类、注解（如@Component）或API方式定义Bean。</p></li><li><p><strong>Bean元信息解析阶段</strong>：Spring容器启动过程中，会将Bean定义解析成Spring内部的BeanDefinition结构。</p></li><li><p><strong>Bean注册阶段</strong>：解析后的BeanDefinition会被注册到Spring容器中，通常是通过实现BeanDefinitionRegistry接口的容器类（如DefaultListableBeanFactory）来完成的。</p></li></ul><br><ol start="2"><li><strong>Bean</strong> 实例化阶段</li></ol><ul><li><p><strong>Bean Class加载阶段</strong>：将BeanDefinition中的beanClassName转换为Class对象。</p></li><li><p><strong>Bean实例化</strong>：Spring容器根据BeanDefinition中的信息创建Bean实例。对于ApplicationContext容器，通常在容器初始化完成后就实例化所有Bean；而对于BeanFactory容器，则是延迟实例化，即在调用getBean方法时才会实例化。</p></li></ul><br><ol start="3"><li><strong>Bean</strong> 依赖注入阶段</li></ol><ul><li><strong>属性设置</strong>：Spring容器将Bean的依赖注入到Bean实例中，完成属性的设置。这通常通过反射机制调用Bean的setter方法或构造方法注入依赖。</li><li><strong>Aware接口回调</strong>：Spring会检测Bean是否实现了特定的Aware接口（如BeanFactoryAware、ApplicationContextAware等），并调用相应的方法，将Spring容器的实例或其他相关对象注入到Bean中。</li></ul><br><ol start="4"><li><strong>Bean</strong> 初始化阶段</li></ol><ul><li><strong>BeanPostProcessor前置处理</strong>：如果容器中存在BeanPostProcessor的实现，那么会在Bean初始化前后执行相应的回调方法（如postProcessBeforeInitialization）。</li><li><strong>自定义初始化方法</strong>：Spring提供了多种方式定义Bean的初始化方法，包括使用@PostConstruct注解、实现InitializingBean接口或在XML配置中指定init-method属性。这些方法会在Bean属性设置完成后执行，用于执行一些自定义的初始化逻辑。</li><li><strong>BeanPostProcessor后置处理</strong>：在自定义初始化方法执行后，如果存在BeanPostProcessor的实现，会调用其postProcessAfterInitialization方法进行后置处理。</li></ul><br><ol start="5"><li><strong>Bean</strong> 就绪使用阶段</li></ol><ul><li><strong>Bean使用</strong>：经过上述阶段后，Bean被完全初始化并准备就绪，可以被应用程序使用。</li></ul><br><ol start="6"><li><strong>Bean</strong> 初始化阶段</li></ol><ul><li><strong>Bean销毁</strong>：当Spring容器关闭时，会触发Bean的销毁过程。如果Bean实现了DisposableBean接口或在配置中指定了destroy-method属性，那么会调用相应的方法执行销毁逻辑。</li></ul><h3 id="二-、生命周期（图像描述）"><a href="#二-、生命周期（图像描述）" class="headerlink" title="二 、生命周期（图像描述）"></a>二 、生命周期（图像描述）</h3><p>整体的生命周期如下图所示。</p><p><img src="/../image/bean_lifecycle.png"></p><h3 id="三-、生命周期（代码演示）"><a href="#三-、生命周期（代码演示）" class="headerlink" title="三 、生命周期（代码演示）"></a>三 、生命周期（代码演示）</h3><ul><li>User</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package org.<span class="hljs-property">example</span>.<span class="hljs-property">lifecycle</span>;<br><br><span class="hljs-keyword">import</span> jakarta.<span class="hljs-property">annotation</span>.<span class="hljs-property">PostConstruct</span>;<br><span class="hljs-keyword">import</span> jakarta.<span class="hljs-property">annotation</span>.<span class="hljs-property">PreDestroy</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">BeansException</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">BeanFactory</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">BeanFactoryAware</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">BeanNameAware</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">InitializingBean</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Value</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">ApplicationContext</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">ApplicationContextAware</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Date</span>;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanNameAware</span>, <span class="hljs-title class_">BeanFactoryAware</span>, <span class="hljs-title class_">ApplicationContextAware</span>, <span class="hljs-title class_">InitializingBean</span> &#123;<br>    \\ <br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;秦始皇&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> userName;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Date</span> registerDate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">User</span>() &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;User 的构造方法执行 ------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> userName</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;setUserName 依赖注入 ------&quot;</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userName</span> = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUserName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Date</span> <span class="hljs-title function_">getRegisterDate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> registerDate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setRegisterDate</span>(<span class="hljs-params"><span class="hljs-title class_">Date</span> registerDate</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">registerDate</span> = registerDate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPassword</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> password</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBeanFactory</span>(<span class="hljs-title class_">BeanFactory</span> beanFactory) throws <span class="hljs-title class_">BeansException</span> &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;beanFactory 方法执行 -------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBeanName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;setBeanName 方法执行---------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setApplicationContext</span>(<span class="hljs-title class_">ApplicationContext</span> applicationContext) throws <span class="hljs-title class_">BeansException</span> &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;setApplicationContext方法执行了------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  自定义 init() 方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;init方法执行---------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现 InitializingBean 接口</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> <span class="hljs-variable">Exception</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">afterPropertiesSet</span>() throws <span class="hljs-title class_">Exception</span> &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;afterPropertiesSet方法执行----------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">destroy</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;destroy方法执行---------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        final <span class="hljs-title class_">StringBuffer</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;User&#123;&quot;</span>);<br>        sb.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;userName=&#x27;&quot;</span>).<span class="hljs-title function_">append</span>(userName).<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>);<br>        sb.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;, registerDate=&quot;</span>).<span class="hljs-title function_">append</span>(registerDate);<br>        sb.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;, password=&#x27;&quot;</span>).<span class="hljs-title function_">append</span>(password).<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>);<br>        sb.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>        <span class="hljs-keyword">return</span> sb.<span class="hljs-title function_">toString</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>MyBeanPostProcessor</li></ul><p>实现BeanPostProcessor接口的方法，根据我们书写的User类名，来打印指定User生成的Bean的信息和执行过程。动态加载的形式调用User的方法toString()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.lifecycle;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><span class="hljs-keyword">import</span> org.springframework.cglib.proxy.Enhancer;<br><span class="hljs-keyword">import</span> org.springframework.cglib.proxy.InvocationHandler;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前置方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> BeansException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">if</span> (beanName.equals(<span class="hljs-string">&quot;user&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;postProcessBeforeInitialization方法 -&gt; user对象初始化前增强&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">if</span> (beanName.equals(<span class="hljs-string">&quot;user&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;postProcessAfterInitialization方法 -&gt; user对象方法初始化后开始增强&quot;</span>);<br>            <span class="hljs-comment">// cglib 代理对象</span><br>            <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>            <span class="hljs-comment">// 设置需要增强的类</span><br>            enhancer.setSuperclass(bean.getClass());<br>            <span class="hljs-comment">// 执行回调方法 增强方法</span><br>            enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                    <span class="hljs-comment">// 执行目标方法</span><br>                    <span class="hljs-keyword">return</span> method.invoke(bean, args);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">// 创建代理对象</span><br>            <span class="hljs-keyword">return</span> enhancer.create();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>Test相关信息</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">    <span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> jakarta.<span class="hljs-keyword">annotation</span>.Resource;<br><span class="hljs-keyword">import</span> org.example.lifecycle.User;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanLifeCycle</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    User user;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> void testBean() &#123;<br>        System.<span class="hljs-keyword">out</span>.println(user.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>打印结果<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">User</span> 的构造方法执行 <span class="hljs-comment">------</span><br>setBeanName 方法执行<span class="hljs-comment">---------</span><br>beanFactory 方法执行 <span class="hljs-comment">-------</span><br>setApplicationContext方法执行了<span class="hljs-comment">------</span><br>postProcessBeforeInitialization方法 -&gt; <span class="hljs-keyword">user</span>对象初始化前增强<br>init方法执行<span class="hljs-comment">---------</span><br>afterPropertiesSet方法执行<span class="hljs-comment">----------</span><br>postProcessAfterInitialization方法 -&gt; <span class="hljs-keyword">user</span>对象方法初始化后开始增强<br><span class="hljs-keyword">User</span> 的构造方法执行 <span class="hljs-comment">------</span><br><span class="hljs-keyword">User</span>&#123;userName=<span class="hljs-string">&#x27;秦始皇&#x27;</span>, registerDate=<span class="hljs-keyword">null</span>, <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br>destroy方法执行<span class="hljs-comment">---------</span><br><br>进程已结束,退出代码<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBean Spring Bean生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring AOP切面编程&amp;动态代理&amp;反射机制</title>
    <link href="/2024/08/07/Spring-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/08/07/Spring-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis 基础数据结构及应用场景</title>
    <link href="/2024/08/01/Redis-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <url>/2024/08/01/Redis-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<p>这一篇内容主要内容为redis的基础数据结构内容，以及各数据类型具体的应用场景，并且简单地使用Java中的redisTemplate和redission进行操作展示伪代码。</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>总所周知，缓存是个好东西无论是在硬件设计而言还是在软件设计而言，在计算能力一定的情况下，系统的效率大多受到IO效率的影响。现在我们举个具体生活中的假设的例子。</p><h3 id="1-1-无缓存的蜜雪"><a href="#1-1-无缓存的蜜雪" class="headerlink" title="1.1 无缓存的蜜雪"></a>1.1 无缓存的蜜雪</h3><p>蜜雪冰城的饮品物美价廉且制作迅速，假设没有“缓存”存在的情况下，人们和奶茶店像是隔了一条马路。当店员制作完成一杯奶茶时，会通知马路对面的顾客取餐。等到顾客取到奶茶后，再进行下一杯奶茶的制作。这个过程中整体流程的进度完全受到顾客过马路的大大拖累。</p><h3 id="1-2-缓存的蜜雪"><a href="#1-2-缓存的蜜雪" class="headerlink" title="1.2 缓存的蜜雪"></a>1.2 缓存的蜜雪</h3><p>存在“缓存”的情况，懂点小知识的店员将在店内开辟一个“缓存空间”优化过马路的过程，将过马路和制作奶茶的行为同时进行。且在店内空间取得过程和之前相较而言时间缩减不少。这就是缓存得意义，及提高IO效率提升系统得整体效率。</p><h2 id="2-Redis"><a href="#2-Redis" class="headerlink" title="2 Redis"></a>2 Redis</h2><p><a href="https://redis.io/">Redis</a>全称名为(Remote Dictionary Server)，及远程字典服务。这是一款使用C语言编写的、支持网络、可基于内存同时可以持久化的日志型、key-Value数据库。优于其基于内存、多路复用IO以及底层C语言的设计，其读写速度奇快每秒可操作<strong>10万次</strong>读写操作。</p><h3 id="2-1-Redis-数据结构"><a href="#2-1-Redis-数据结构" class="headerlink" title="2.1 Redis 数据结构"></a>2.1 Redis 数据结构</h3><p>Redis提供五种基本数据结构提供给用户使用。</p><ul><li>String (字符串)<br>可以存储任意类型的数据</li></ul><br><ul><li>List (列表)<br>可存储多个有序的字符串，一个列表。最多可以存储<strong>2^32-1</strong>个元素。可作为<strong>栈</strong>、<strong>队列</strong>或<strong>有限集合</strong>使用。</li></ul><br><ul><li>Set (集合)<br>  保存多个字符串元素，不允许出现重复元素。支持<strong>交集</strong>、<strong>并集</strong>和<strong>差集</strong>操作。</li></ul><br><ul><li>Hash (散列)<br>  String类型的<strong>filed-value</strong>(键值对)映射表。类比Java数据结构中HashMap。</li></ul><br><ul><li>Zset (有序集合)<br>  <strong>已排序</strong>的字符串集合，元素<strong>不重复</strong>，各元素关联一个double类型分数。Redis根据分数进行排序。</li></ul><h3 id="3-Redis-应用场景"><a href="#3-Redis-应用场景" class="headerlink" title="3 Redis 应用场景"></a>3 Redis 应用场景</h3><h4 id="3-1-数据库的缓存"><a href="#3-1-数据库的缓存" class="headerlink" title="3.1 数据库的缓存"></a>3.1 数据库的缓存</h4><ul><li>缓存穿透</li></ul><br><ul><li>缓存击穿</li></ul><br><ul><li>缓存雪崩</li></ul><h4 id="3-2-消息队列"><a href="#3-2-消息队列" class="headerlink" title="3.2 消息队列"></a>3.2 消息队列</h4><p>Redis的List数据类型可以实现简单的消息队列功能，支持阻塞式读取和发布&#x2F;订阅模式。</p><h4 id="3-3-计数器"><a href="#3-3-计数器" class="headerlink" title="3.3 计数器"></a>3.3 计数器</h4><p>Redis的String数据类型支持自增自减操作，适合作为计数器使用。该应用场景可以用于对于某个直播、贴文、视频的在线浏览数量。</p><h4 id="3-4-排行榜"><a href="#3-4-排行榜" class="headerlink" title="3.4 排行榜"></a>3.4 排行榜</h4><p>Redis的Zset数据结构是根据double数据类型进行有序排序的，可以实现热榜的盘列，游戏榜单的排序等。</p><h4 id="3-5-分布式锁"><a href="#3-5-分布式锁" class="headerlink" title="3.5 分布式锁"></a>3.5 分布式锁</h4><p>Redis支持事务和原子性操作，可以用来实现分布式操作。</p><h3 id="4-Redis-持久化"><a href="#4-Redis-持久化" class="headerlink" title="4 Redis 持久化"></a>4 Redis 持久化</h3><p>持久化，做的目的是内存可能在机器宕机的过程中丢失的风险。因此需要对处理Redis位于内存的数据，将其进行持久化操作。</p><h4 id="4-1-RDB-Redis-Database"><a href="#4-1-RDB-Redis-Database" class="headerlink" title="4.1 RDB (Redis Database)"></a>4.1 RDB (Redis Database)</h4><p>在指定时间，时间间隔以内定时地将内存中的数据集写入磁盘中。</p><h4 id="4-2-AOF-Append-Only-File"><a href="#4-2-AOF-Append-Only-File" class="headerlink" title="4.2 AOF (Append Only File)"></a>4.2 AOF (Append Only File)</h4><p>通过日志的形式记录所有的读写操作，在启动系统的时候重新执行来恢复内存中的数据。为避免日志信息过大，定期会消除大量冗余的操作字段避免日志信息过于庞大。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/01/hello-world/"/>
    <url>/2024/08/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
